#!/bin/bash
set -e

export IMAGE_TAG=build-$BITBUCKET_BUILD_NUMBER
export ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY
export VERSION_COUNTER_PARAM="/ecr/image/version-counter"
export KEEP_IMAGES=15

echo ""
echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚ñ∂ Running on ARM architecture: $(uname -m)   "
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""
echo ""
echo ""

echo ""
echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚ñ∂ Installing AWS CLI on Amazon Linux ARM     "
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""
echo ""

# Install AWS CLI on Amazon Linux 2023 ARM
dnf install -y unzip
curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install
export PATH=/usr/local/bin:$PATH

echo ""
echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚ñ∂ Logging into Amazon ECR                    "
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""
echo ""

aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URI

echo ""
echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚ñ∂ Fetching version tag from SSM              "
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""

VERSION_TAG=$(aws ssm get-parameter --name "$VERSION_COUNTER_PARAM" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "0")
NEXT_VERSION_TAG=$((VERSION_TAG + 1))
VERSION_IMAGE_TAG="v$NEXT_VERSION_TAG"

echo "‚ñ∂ Incremented version tag: $VERSION_IMAGE_TAG"

aws ssm put-parameter \
  --name "$VERSION_COUNTER_PARAM" \
  --type String \
  --value "$NEXT_VERSION_TAG" \
  --overwrite

echo ""
echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚ñ∂ Building Docker Image (Native ARM)         "
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""

# Build natively on ARM
docker build \
  -t $ECR_URI:$IMAGE_TAG \
  -t $ECR_URI:latest \
  -t $ECR_URI:$VERSION_IMAGE_TAG \
  .

echo ""
echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚ñ∂ Pushing Docker Image to Amazon ECR         "
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""

docker push $ECR_URI:$IMAGE_TAG
docker push $ECR_URI:latest
docker push $ECR_URI:$VERSION_IMAGE_TAG

echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚ñ∂ Cleaning up old ECR images (keep $KEEP_IMAGES latest)"
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""

# Get all image tags (excluding 'latest')
ALL_IMAGES=$(aws ecr list-images \
  --repository-name "$ECR_REPOSITORY" \
  --region "$AWS_DEFAULT_REGION" \
  --query 'imageIds[*].imageTag' \
  --output text | tr '\t' '\n' | grep -v 'latest' | sort -V)

# Count total
TOTAL_IMAGES=$(echo "$ALL_IMAGES" | wc -l)

# Determine how many to delete
NUM_TO_DELETE=$((TOTAL_IMAGES - KEEP_IMAGES))

if [ "$NUM_TO_DELETE" -gt 0 ]; then
  echo "‚ñ∂ Deleting $NUM_TO_DELETE old images..."
  IMAGES_TO_DELETE=$(echo "$ALL_IMAGES" | head -n $NUM_TO_DELETE)

  for TAG in $IMAGES_TO_DELETE; do
    echo "üóëÔ∏è  Deleting image: $TAG"
    aws ecr batch-delete-image \
      --repository-name "$ECR_REPOSITORY" \
      --region "$AWS_DEFAULT_REGION" \
      --image-ids imageTag=$TAG
  done
else
  echo "‚úÖ Fewer than $KEEP_IMAGES images found. No cleanup needed."
fi

echo ""
echo ""
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo "‚úÖ ARM Build and Push Completed Successfully "
echo ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
echo ""